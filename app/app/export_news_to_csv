#!/usr/local/bin/python

import argparse
import csv
import sys
import psycopg2

def fetch_news_records(db_config):
    """Connects to Postgres and fetches all news records."""
    try:
        conn = psycopg2.connect(
            host=db_config["host"],
            port=db_config["port"],
            dbname=db_config["dbname"],
            user=db_config["user"],
            password=db_config["password"]
        )
        cur = conn.cursor()
        cur.execute("SELECT id, title, pub_date, source FROM news ORDER BY id;")
        records = cur.fetchall()
        cur.close()
        conn.close()
        return records
    except Exception as e:
        print(f"Error fetching records: {e}", file=sys.stderr)
        sys.exit(1)

def write_to_csv(records, output_file):
    """Writes the list of records to a CSV file."""
    try:
        with open(output_file, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Title", "Publication Date", "Source"])  # CSV Header
            writer.writerows(records)
        print(f"CSV file saved: {output_file}")
    except Exception as e:
        print(f"Error writing CSV: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(
        description="Export news records from Postgres to a CSV file."
    )
    parser.add_argument("--dbhost", type=str, default="postgres", help="Database host (default: postgres)")
    parser.add_argument("--dbport", type=int, default=5432, help="Database port (default: 5432)")
    parser.add_argument("--dbname", type=str, default="newsdb", help="Database name (default: newsdb)")
    parser.add_argument("--dbuser", type=str, default="youruser", help="Database user (default: youruser)")
    parser.add_argument("--dbpassword", type=str, default="yourpassword", help="Database password (default: yourpassword)")
    parser.add_argument("--output", type=str, default="exported_news.csv", help="Output CSV filename (default: exported_news.csv)")
    args = parser.parse_args()

    db_config = {
        "host": args.dbhost,
        "port": args.dbport,
        "dbname": args.dbname,
        "user": args.dbuser,
        "password": args.dbpassword,
    }

    records = fetch_news_records(db_config)
    write_to_csv(records, args.output)

if __name__ == "__main__":
    main()
